#include "./Console.huff"

#define function logTest(uint256, uint256, uint256) pure returns (uint256)

#define macro MAIN() = {
    0x00 calldataload 0xE0 shr              // [sig]
    dup1 __FUNC_SIG(logTest) eq logTestJump jumpi
    0x00 0x00 revert
    logTestJump:
        LOG_TEST()
}

#define macro LOG_TEST() = {
    // logs out calldata as bytes from offset 0x04 till 0x04 + 0x60 bytes and uses memory offset 0x00 for logging operations
    LOG_CALLDATA(0x04, 0x60, 0x00)

    LOG_CALLDATA_AS_UINT(0x04, 0x00)

    // logs out calldata as bytes from offset 0x04 till 0x04 + 0x20 bytes and uses memory offset 0x00 for logging operations
    LOG_CALLDATA_AS_STRING(0x04, 0x20, 0x00)
    
    // "0a" is hex for "\n" which breaks into a new line, "20" is whitespace
    __RIGHTPAD(0x0a2020414243) 0x00 mstore

    // logs out memory as bytes from offset 0x00 till offset 0x00 + 0x06 bytes and uses memory offset 0x20 for logging operations
    LOG_MEMORY(0x00, 0x06, 0x20)

    // logs out memory as string from offset 0x00 till offset 0x00 + 0x06 bytes and uses memory offset 0x20 for logging operations
    LOG_MEMORY_AS_STRING(0x00, 0x06, 0x20)


    // STYLE_LOGGING
    // store the signature of the style type in memory
    [MAGENTA] 0x20 mstore
    // logs out memory as string from offset 0x00 till offset 0x00 + 0x06 bytes, uses memory offset 0x40 for logging operations 
    // and the ;ast parameter specifies the offset where the styling signature is stored.
    // notice it uses memory offset 0x40 for logging operations rather than 0x20, thats because 0x20 in this case is used to store the style sig
    LOG_MEMORY_AS_STRING_STYLE(0x00, 0x06, 0x40, 0x20)



    // fill up the stack for stack operations below
    pc 0x4e03657aea45a94fc7d47ba826c8d667c0d1e6e33a64a036ec44f58fa12d6c45 caller 0x00 
    gas 0x48bed44d1bcd124a28c27f343a817e5f5243190d3c52bf347daf876de1dbbf77 address 0x01                     // [0x01, address(this), randomHash, gas, 0x00, caller, randomHash, pc]
    pc 0x4e03657aea45a94fc7d47ba826c8d667c0d1e6e33a64a036ec44f58fa12d6c45 caller 0x00 
    gas 0x48bed44d1bcd124a28c27f343a817e5f5243190d3c52bf347daf876de1dbbf77 address 0x01                     // [0x01, address(this), randomHash, gas, 0x00, caller, randomHash, pc]

    // logs out the first 8 stack items and uses 0x00 for logging operations
    LOG_STACK_16(0x00)                           // [0x01, address(this), blockhash, gas, 0x00, caller, gasprice, pc]

    LINE_BREAK(0x00, 0x20)

    
    // logs stack item 1 as a boolean
    LOG_STACK_AS_BOOL(dup1, 0x00)               // [0x01, address(this), blockhash, gas, 0x00, caller, gasprice, pc]

    // logs stack item 2 as an address
    LOG_STACK_AS_ADDRESS(dup2, 0x00)            // [0x01, address(this), blockhash, gas, 0x00, caller, gasprice, pc]

    // log stack item 3 as a bytes32
    LOG_STACK_AS_BYTES32(dup3, 0x00)            // [0x01, address(this), blockhash, gas, 0x00, caller, gasprice, pc]

    // log stack item 4 as a uint256
    LOG_STACK_AS_UINT(dup4, 0x00)               // [0x01, address(this), blockhash, gas, 0x00, caller, gasprice, pc]

    // logs stack item 5 as a boolean
    LOG_STACK_AS_BOOL(dup5, 0x00)               // [0x01, address(this), blockhash, gas, 0x00, caller, gasprice, pc]

    // log stack item 6 as an address
    LOG_STACK_AS_ADDRESS(dup6, 0x00)            // [0x01, address(this), blockhash, gas, 0x00, caller, gasprice, pc]

    // log stack item 7 as a bytes32
    LOG_STACK_AS_BYTES32(dup7, 0x00)            // [0x01, address(this), blockhash, gas, 0x00, caller, gasprice, pc]

    // log stack item 8 as a uint256
    LOG_STACK_AS_UINT(dup8, 0x00)               // [0x01, address(this), blockhash, gas, 0x00, caller, gasprice, pc]

    0x00 0x00 return
}

